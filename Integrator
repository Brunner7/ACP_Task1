/*
 ============================================================================
 Name        : integrator_task1.c
 Author      : ich
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#define root 3			//root of number of particles, I want a quadratic initial lattice
#define Pe 0			//Peclet number
#define t_ini 0			//t0
#define t_fin 100		//tfin
#define timestep 0.0001	//time step size
#define L 85			//box length

#define steps (t_fin-t_ini)/timestep/10 // number of iterations/100
#define N root*root		//number of particles

//function to generate random values
double normal_distribution(double mu, double sigma) {
	       double myRand1 = rand()/(1.0 + RAND_MAX);
	       double myRand2 = rand()/(1.0 + RAND_MAX);
	      // printf("%f \n",myRand);
	       return mu + sigma*sqrt(-2*log(myRand1))*cos(2*M_PI* myRand2);
	   }

int main(void) {

	int i,j;
	double x[N],y[N],phi[N],t;

	FILE *values;
		values = fopen("values.txt", "w");
		fprintf(values,"current time \t particle1: (x y phi) particle2: (x y phi) etc \n 0 ");

	for(i=0;i<N;i=i+root){
		for(j=0;j<root;j++){
			x[i+j]=(j+.5)*L/(2.0*root)-L/4;
			y[i+j]=(i+root/2.0)/root*L/(2.0*root)-L/4;
		}
	}

	for (i=0; i < N; i++){
		//x[i]=0; //normal_distribution(0,1);
		//y[i]=0; //normal_distribution(0,1);
		phi[i]=2*M_PI*normal_distribution(0,1);
		fprintf(values,"%.5f  %.5f  %.5f ",x[i],y[i],phi[i]);
	}
	int count =0;
	for (t=t_ini;t<=t_fin;t+=timestep){
		count+=1;
		if(count%steps==0){
			fprintf(values,"\n %.5f ",t);
			for (j=0;j<N;j++){fprintf(values,"%.5f  %.5f  %.5f ",x[j],y[j],phi[j]);}
		}
		for (j=0;j<N;j++) {
			if (x[j]>L/2.0){x[j]=x[j]-L;}
			if (x[j]<-L/2.0){x[j]=x[j]+L;}
			if (y[j]>L/2.0){y[j]=y[j]-L;}
			if (y[j]<-L/2.0){y[j]=y[j]+L;}
			x[j] 		= x[j] + 	Pe * cos(phi[j]) * timestep +  normal_distribution(0,1) * sqrt(2.0*timestep);
			y[j] 		= y[j] + 	Pe * sin(phi[j]) * timestep +  normal_distribution(0,1) * sqrt(2.0*timestep);
			phi[j] 		= phi[j] +  normal_distribution(0,1) * sqrt(2.0*timestep);

		}

	}

return EXIT_SUCCESS;
}


